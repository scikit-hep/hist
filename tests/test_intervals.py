import numpy as np
import pytest
from pytest import approx

from hist import Hist, axis, intervals


@pytest.fixture(scope="session")
def hist_fixture():
    np.random.seed(42)

    hist_1 = Hist(
        axis.Regular(
            30, -3, 3, name="X", label="x [units]", underflow=False, overflow=False
        )
    ).fill(np.random.normal(size=1000))
    hist_2 = Hist(
        axis.Regular(
            30, -3, 3, name="X", label="x [units]", underflow=False, overflow=False
        )
    ).fill(np.random.normal(size=1700))

    return hist_1, hist_2


def test_poisson_interval(hist_fixture):
    hist_1, hist_2 = hist_fixture

    interval_min, interval_max = intervals.poisson_interval(
        hist_1.values(), hist_2.values()
    )
    interval_min[np.isnan(interval_min)] = np.inf

    assert approx(interval_min) == np.array(
        [
            np.inf,
            1.367295313890434,
            0.11640648835506541,
            0.16813691995933283,
            6.218902013333934,
            5.581885639953393,
            12.073194296966197,
            24.41791172658764,
            26.448630661223767,
            29.586027214407356,
            44.61442023134141,
            52.513856022921146,
            77.22286346848537,
            56.48053933662985,
            59.181466346149975,
            73.46017971168686,
            76.98381465233572,
            51.11422215924317,
            60.59758574929647,
            38.220957585930776,
            35.33980227713647,
            12.694821887253045,
            28.556630883837485,
            9.916925984144548,
            11.923130919510358,
            6.553001854991516,
            0.8338910101291227,
            3.279073015531129,
            0.3455075580468999,
            np.inf,
        ]
    )
    assert approx(interval_max) == np.array(
        [
            1.8410216450092634,
            5.918185832883396,
            9.436904357727963,
            8.497457342237139,
            12.809793765013492,
            16.997260128680114,
            23.61395642678031,
            39.15367169418417,
            43.44876191270042,
            48.52076138259468,
            65.17807066898288,
            75.39575495375637,
            97.94286113578973,
            81.65821409089807,
            84.97094651670344,
            98.2239031484522,
            100.48976217732788,
            77.37159837327934,
            83.05078530924457,
            60.007720159359465,
            54.559021073997485,
            30.628601280110384,
            42.75475530038196,
            24.995626256846915,
            21.276544584200877,
            17.752810841884095,
            7.956394295315844,
            10.367005923085337,
            6.59905311823171,
            1.8410216450092634,
        ]
    )


def test_clopper_pearson_interval(hist_fixture):
    hist_1, _ = hist_fixture

    interval_min, interval_max = intervals.clopper_pearson_interval(
        hist_1.values() * 0.8, hist_1.values()
    )

    assert approx(interval_min) == np.array(
        [
            0.0,
            0.356101599132999,
            0.24823747856790412,
            0.24823747856790412,
            0.5796381721364965,
            0.5945462492365069,
            0.6553316088046119,
            0.7017549604674665,
            0.7073134299532806,
            0.7135499379572423,
            0.7303918280217871,
            0.7366025731666422,
            0.747712907749326,
            0.7394499309400637,
            0.7409965720106119,
            0.7469889633432774,
            0.7480646510754927,
            0.7366025731666422,
            0.7409965720106119,
            0.725190715883876,
            0.7210714404984849,
            0.669881130877133,
            0.7089853912674083,
            0.6494644930140533,
            0.6494644930140533,
            0.6071564532535227,
            0.356101599132999,
            0.5119169044053422,
            0.24823747856790412,
            0.0,
        ]
    )

    assert approx(interval_max) == np.array(
        [
            1.0,
            0.9877641297108364,
            0.9967763463205565,
            0.9967763463205565,
            0.9338657953092819,
            0.9280461985173104,
            0.9006525539880732,
            0.8750821652665013,
            0.8716966334707261,
            0.8678052739470051,
            0.8567701018486796,
            0.8524911283824559,
            0.8445254405242179,
            0.8504887845995179,
            0.8493900886167576,
            0.8450572872847111,
            0.8442663627032932,
            0.8524911283824559,
            0.8493900886167576,
            0.8602638210720486,
            0.8629753273954497,
            0.8931224604654777,
            0.8706631844333439,
            0.9035746974457707,
            0.9035746974457707,
            0.922861360677511,
            0.9877641297108364,
            0.9564011091136548,
            0.9967763463205565,
            1.0,
        ]
    )


def test_ratio_uncert_poisson(hist_fixture):
    hist_1, hist_2 = hist_fixture

    with np.errstate(divide="ignore", invalid="ignore"):
        uncert_min, uncert_max = intervals.ratio_uncertainty(
            hist_1.values(), hist_2.values(), uncert_type="poisson"
        )
    uncert_min[np.isnan(uncert_min)] = np.inf

    assert approx(uncert_min) == np.array(
        [
            np.inf,
            0.5442348953698554,
            0.1845449371687184,
            0.2153024266968381,
            0.36793262965634477,
            0.14803306854103054,
            0.16328735597366828,
            0.12585375740467664,
            0.10003669671301474,
            0.08523837652614685,
            0.0823105658636859,
            0.07131648130726226,
            0.09697312390629986,
            0.061387187171010604,
            0.05961885328676131,
            0.06866697092973495,
            0.07674569867624004,
            0.05535754842731544,
            0.0771216359030582,
            0.07117504367911598,
            0.08694657891720786,
            0.07918657111096644,
            0.1401827326329852,
            0.10148207767702055,
            0.23281182525904753,
            0.15550378099768142,
            0.2721174476849277,
            0.2974914224119715,
            0.3229536400452572,
            np.inf,
        ]
    )

    assert approx(uncert_max) == np.array(
        [
            0.6136738816697545,
            0.972728610961132,
            0.376837089065035,
            0.4396432705758742,
            0.5137755172084555,
            0.2031880838575899,
            0.20814877559535383,
            0.15062730088147014,
            0.11876035397215612,
            0.1002567163955489,
            0.09431292052386309,
            0.08089436452856247,
            0.10794941653181667,
            0.06930343127573091,
            0.06713287739738094,
            0.07653527870763621,
            0.08538026910447305,
            0.06279212910958337,
            0.08684161204615337,
            0.08223020537095749,
            0.10109881672756582,
            0.09904498624127606,
            0.16600975376913252,
            0.13033501446195506,
            0.2990038567068378,
            0.21031050110314442,
            0.486364305480566,
            0.44795519324807165,
            0.6594649058638113,
            0.6136738816697545,
        ]
    )
